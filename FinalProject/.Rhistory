# Clear environment
rm(list = ls())
# Clear console
cat("\014")          # ctrl+L
2+2                 # Basic arithmetic operation
0:100               # Print 1 to 100 several lines
print("Hello World!")
A <- 1              # Use <- not = to set things
2 -> B              # Goes either way (not a best practice)
c <- d <- e <- 3    # Multiple Assignments
# Multiple Values           ####################
X <- c(1, 2, 5, 9)  # c means to concatenate
X                   # Print X in Console
0:10                # 0 to 10
10:0                # 10 to 0
seq(10)             # 1 to 10
seq(30, 0, by = -3) # Increment down by 3
# close commands with parentheses to print
(Y <- c(5, 1, 0, 10))
X + Y               # Add variables
X * 5               # Multipy variables
2^6                 # Raise powers/exponents
sqrt(64)            # Squareroot
log(100)            # Natural log: base e (2.71828...)
log10(100)          # Base 10 log
# Clear environment
rm(list = ls())
# Clear console
cat("\014")          # ctrl+L
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
# Give data, then dimensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
df1 <- cbind(vNumeric, vCharacter, vLogical)
df1  # Coerces all values to most basic data type
df2 <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df2  # Makes a data frame with three different data types
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
list1 <- list(o1, o2, o3)
list1
list2 <- list(o1, o2, o3, list1)  # Lists within lists!
list2
(coerce1 <- c(1, "b", TRUE))
typeof(coerce1)
(coerce2 <- 5)
typeof(coerce2)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce4 <- c("1", "2", "3"))
typeof(coerce4)
(coerce5 <- as.numeric(c("1", "2", "3")))
typeof(coerce5)
(coerce6 <- matrix(1:9, nrow= 3))
is.matrix(coerce6)
(coerce7 <- as.data.frame(matrix(1:9, nrow= 3)))
is.data.frame(coerce7)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
# Load base packages manually
# Load base packages manually
# Load base packages manually
# Load base packages manually
# Load base packages manually
# Load base packages manually
# Load base packages manually
# Load base packages manually
library(datasets)  # For example datasets
?iris
df <- iris
head(df)
# Use comments to disable commands
hist(df$Sepal.Width,
# col  = "#CD0000",  # red3
# border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
#   Load more packages with pacman
pacman::p_load(pacman, dplyr, ggplot2, forecast, scico, rio, tidyverse, tidyr)
#   Convert/prep scientific notation to legible number
options(scipen=999)
#   Get State Level Data - Import data with rio
statedata <- rio::import("https://remote-location/.../data/daily.csv")
#   Get County Level Data - Import data with rio
countydata <- rio::import("https://remote-location/.../data/nc-death-by-county.csv")
#   Date is a native integer, use lubridate to convert attributes to date objects
#   This will later support Timeseries plots and Linear Model forecasting
statedata$date <- lubridate::ymd(statedata$date)
#   Filter data by the state for Family Physician
state <- filter(statedata, state %in% c("NC"))
#   Filter data by all surrounding Counties for Family Physician practicing in Iredell Co. NC
county <- filter(countydata, County %in% c("Iredell", "Cabarrus", "Catawba", "Davie", "Lincoln", "Mecklenburg", "Rowan", "Wilkes", "Yadkin"))
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Remove plots
dev.off()  # do only if a plot exists
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   Load more packages with pacman
pacman::p_load(pacman, dplyr, ggplot2, forecast, scico, rio, tidyverse, tidyr)
#   Convert/prep scientific notation to legible number
options(scipen=999)
#   Get State Level Data - Import data with rio
statedata <- rio::import("https://remote-location/.../data/daily.csv")
#   Get County Level Data - Import data with rio
countydata <- rio::import("https://remote-location/.../data/nc-death-by-county.csv")
#   Date is a native integer, use lubridate to convert attributes to date objects
#   This will later support Timeseries plots and Linear Model forecasting
statedata$date <- lubridate::ymd(statedata$date)
#   Load more packages with pacman
pacman::p_load(pacman, dplyr, ggplot2, forecast, scico, rio, tidyverse, tidyr)
#   Convert/prep scientific notation to legible number
options(scipen=999)
#   Get State Level Data - Import data with rio
statedata <- rio::import("~/.../FinalProject/data/daily.csv")
#   Get County Level Data - Import data with rio
countydata <- rio::import("~/.../FinalProject/data/nc-death-by-county.csv")
#   Date is a native integer, use lubridate to convert attributes to date objects
#   This will later support Timeseries plots and Linear Model forecasting
statedata$date <- lubridate::ymd(statedata$date)
#   Filter data by the state for Family Physician
state <- filter(statedata, state %in% c("NC"))
#   Filter data by all surrounding Counties for Family Physician practicing in Iredell Co. NC
county <- filter(countydata, County %in% c("Iredell", "Cabarrus", "Catawba", "Davie", "Lincoln", "Mecklenburg", "Rowan", "Wilkes", "Yadkin"))
#   Filter data to compare county area cases per 10,000 Residents vs. Overall Mortality
countyCorr <- tidyr::pivot_longer(county, cols=c('Cases Per 10,000 Residents', 'Deaths'), names_to='variable', values_to="value")
head(countyCorr)
#   Store only quantitative fields for Multiple Regression Analysis
analysis <- state %>%
dplyr::select(where(is.numeric)) #easiest way -- I found -- to capture only quantitative variables
#   Daily Positive Case Increase Boxplot w/ added options
#   Display Confidence Interval for Median of Positive Cases
state %>%
select(positiveIncrease) %>%
boxplot(
horizontal = T,
notch  = T, # Confidence interval
main   = "Boxplot of Daily Positive Increase for the State of North Carolina",
ylab   = "Confidence Interval for Median",
xlab   = "Number of Positive Cases",
col    = "red"
)
#   Neighboring County Case comparison Barchart
ggplot(county, aes(x=County, y=Cases, fill = Cases)) +
geom_col() +
labs(title = "NC Cases by County: Iredell Co. and Immediate Neighboring Counties") +
labs(fill = "Reported Case Volume") +
labs(x = "County", y = "Number of Cases") +
scale_fill_scico(palette = "berlin")
#   Neighboring County Cases per 10k Residents and Mortality Barchart
ggplot(countyCorr, aes(x=County, y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge') +
labs(title = "Iredell Co. NC and Immediate Neighboring Counties: Cases per 10k Residents vs. Deaths") +
labs(fill = "Variable") +
labs(x = "County", y = "Number of Cases / Deaths")
#   Display Timeseries of Daily Positive Increase
#   Forecast to help answer the question of 'trends with spread' or positive cases
ggplot(state, aes(x = date, y = positiveIncrease, color = state)) +
geom_line() +
geom_point() +
theme_minimal() +
xlim(as.Date("2020-03-04"), as.Date("2021-02-25")) +
stat_smooth(method="lm", fullrange=TRUE, fill="black", colour="black", alpha = 0.2) +
ggtitle("North Carolina 9 Mo. Daily Positive Case Increase with 90 Day Trend Forecast") +
labs(colour = "State") +
xlab('Date') +
ylab('Number of Daily Positive Cases')
#   Display Timeseries of Daily Death Increase
#   Forecast to help answer the question of 'trends with mortality'
ggplot(state, aes(x = date, y = deathIncrease, color = state)) +
geom_line() +
geom_point() +
theme_minimal() +
xlim(as.Date("2020-03-04"), as.Date("2021-02-25")) +
stat_smooth(method="lm", fullrange=TRUE, fill="black", colour="black", alpha = 0.2) +
ggtitle("North Carolina 9 Mo. Daily Mortality Increase with 90 Day Trend Forecast") +
labs(colour = "State") +
xlab('Date') +
ylab('Daily Death Toll')
#   Display Timeseries of Total Hospitalizations
#   Forecast to help answer the question of 'trends with hospitalizations'
ggplot(state, aes(x = date, y = hospitalizedCurrently, color = state)) +
geom_line() +
geom_point() +
theme_minimal() +
xlim(as.Date("2020-03-04"), as.Date("2021-02-25")) +
stat_smooth(method="lm", fullrange=TRUE, fill="black", colour="black", alpha = 0.2) +
ggtitle("North Carolina 9 Mo. Hospitalization Totals with 90 Day Trend Forecast") +
labs(colour = "State") +
xlab('Date') +
ylab('Number of Hospitializations')
ggplot() +
geom_line(data = state, aes(x = date, y = positiveIncrease, color = "Daily Positives", na.rm = T)) +
geom_line(data = state, aes(x = date, y = hospitalizedCurrently, color = "Currently Hospitalized", na.rm = T)) +
geom_line(data = state, aes(x = date, y = inIcuCurrently, color = "in Intensive Care (ICU)", na.rm = T)) +
geom_line(data = state, aes(x = date, y = deathProbable, color = "Probable Deaths", na.rm = T)) +
geom_point() +
theme_minimal() +
ggtitle("North Carolina Daily Positives, Hospitalization, ICU, and Probable Deaths 9 Month Overlay") +
labs(color = "Legend: NC Overlay") +
xlab('Date') +
ylab('Frequency / Volume')
analysis %>%
select(hospitalizedCurrently, everything()) %>% # (y, x1, x2, x3...)
print()
#   Design/compute linear model and store
testFit2 <- lm(hospitalizedCurrently ~
positive + probableCases + negative +
totalTestResults + totalTestResultsIncrease + inIcuCurrently +
recovered + death + totalTestsViral + positiveCasesViral +
deathConfirmed + deathProbable + totalTestsAntigen +
positiveIncrease + negativeIncrease + deathIncrease + posNeg,
data = analysis)
#   Display regression model
testFit2
summary(testFit2)
#   Check confidence intervals/coefficients
confint(testFit2)
#   Predict
predict(testFit2)
#   Find intervals
predict(testFit2, interval = "prediction")
#   Convert predictions to a dataframe matrix
predictHospitalization <- as.data.frame(projectedhospitalizations)
#   Give the dataframe a day index
predictHospitalization <- tibble::rowid_to_column(predictHospitalization, "day")
ggplot() +
geom_line(data = predictHospitalization, aes(x = day, y = fit, color = "Fit", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = lwr, color = "Lower Confidence", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = upr, color = "Upper Confidence", na.rm = T)) +
geom_point() +
theme_minimal() +
ggtitle("North Carolina Multiple Regression Predict Hospitalizations") +
labs(color = "Legend") +
xlab('Days Forward') +
ylab('Number Hospitalized')
#   Measure of influence
lm.influence(testFit2)
#   Influence of individual observations on coefficients
influence.measures(testFit2)
ggplot() +
geom_line(data = predictHospitalization, aes(x = day, y = fit, color = "Fit", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = lwr, color = "Lower Confidence", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = upr, color = "Upper Confidence", na.rm = T)) +
geom_point() +
theme_minimal() +
ggtitle("North Carolina Multiple Regression Predict Hospitalizations") +
labs(color = "Legend") +
xlab('Days Forward') +
ylab('Number Hospitalized')
#   Give the dataframe a day index
predictHospitalization <- tibble::rowid_to_column(predictHospitalization, "day")
ggplot() +
geom_line(data = predictHospitalization, aes(x = day, y = fit, color = "Fit", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = lwr, color = "Lower Confidence", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = upr, color = "Upper Confidence", na.rm = T)) +
geom_point() +
theme_minimal() +
ggtitle("North Carolina Multiple Regression Predict Hospitalizations") +
labs(color = "Legend") +
xlab('Days Forward') +
ylab('Number Hospitalized')
#   Display regression model
testFit2
summary(testFit2)
#   Check confidence intervals/coefficients
confint(testFit2)
#   Predict
predict(testFit2)
#   Find intervals
predict(testFit2, interval = "prediction")
#   Store predictions
projectedhospitalizations <- predict(testFit2, interval = "prediction")
#   Convert predictions to a dataframe matrix
predictHospitalization <- as.data.frame(projectedhospitalizations)
#   Give the dataframe a day index
predictHospitalization <- tibble::rowid_to_column(predictHospitalization, "day")
ggplot() +
geom_line(data = predictHospitalization, aes(x = day, y = fit, color = "Fit", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = lwr, color = "Lower Confidence", na.rm = T)) +
geom_line(data = predictHospitalization, aes(x = day, y = upr, color = "Upper Confidence", na.rm = T)) +
geom_point() +
theme_minimal() +
ggtitle("North Carolina Multiple Regression Predict Hospitalizations") +
labs(color = "Legend") +
xlab('Days Forward') +
ylab('Number Hospitalized')
